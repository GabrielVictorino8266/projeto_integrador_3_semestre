"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from pymongo import MongoClient
from dotenv import load_dotenv
from datetime import timedelta
from mongoengine import connect, disconnect
import os
from datetime import datetime
from urllib.parse import urlparse

load_dotenv(override=True)

DEBUG_ENV = os.environ.get('DEBUG', 'False').lower() in ('true', '1', 't')

# Configurações do MongoDB
MONGO_URI = os.environ.get('MONGO_URI')
if not MONGO_URI:
    raise Exception("MONGO_URI não configurada nas variáveis de ambiente")

# Extrai o nome do banco de dados da URI ou usa 'Test' como padrão
parsed_uri = urlparse(MONGO_URI)
MONGO_DB_NAME = parsed_uri.path.strip('/') or 'Test'

# Conexão MongoDB
try:
    print(f"Conectando ao MongoDB: {MONGO_URI}")
    print(f"Banco de dados: {MONGO_DB_NAME}")
    
    # Conecta ao MongoDB usando a URI diretamente
    mongo_client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
    
    # Testa a conexão
    mongo_client.server_info()
    print("✅ Conexão com o servidor bem-sucedida!")
    
    # Obtém o banco de dados
    mongodb = mongo_client[MONGO_DB_NAME]
    
    # Garante que a coleção de migrações existe
    try:
        if 'database_migrations' not in mongodb.list_collection_names():
            mongodb.create_collection('database_migrations')
            print("✅ Coleção 'database_migrations' criada com sucesso.")
        
        # Testa as permissões com um documento temporário
        test_doc = {'_id': 'test_permission', 'timestamp': datetime.utcnow()}
        mongodb.database_migrations.insert_one(test_doc)
        mongodb.database_migrations.delete_one({'_id': 'test_permission'})
        print("✅ Permissões de leitura/escrita verificadas com sucesso!")
        
    except Exception as e:
        print(f"⚠️  Aviso: Não foi possível verificar/criar a coleção 'database_migrations': {str(e)}")
        print("   Por favor, verifique as permissões do usuário no MongoDB Atlas.")
    
    # Conecta o MongoEngine
    connect(host=MONGO_URI, alias='default')
    print(f"✅ MongoEngine conectado com sucesso!")
    
except Exception as e:
    print(f"❌ Erro ao conectar ao MongoDB: {str(e)}")
    raise

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MIGRATIONS_DIR = os.environ.get('MIGRATIONS_DIR', str(BASE_DIR / 'database/migrations'))

if not os.path.isdir(MIGRATIONS_DIR):
    raise Exception(f'Diretório de migrações não encontrado: {MIGRATIONS_DIR}')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("SECRET_KEY não configurada nas variáveis de ambiente")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = DEBUG_ENV

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0', '*'] # Development
# ALLOWED_HOSTS = []

# Swagger
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            'description': 'JWT Authorization header usando o esquema Bearer. Exemplo: "Authorization: Bearer <token>"',
        },
    },
    'USE_SESSION_AUTH': False,
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'drf_yasg',
    'users',
    'drivers',
    'core'
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=48),
    'REFRESH_TOKEN_LIFETIME': timedelta(weeks=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'ALGORITHM': 'HS256',  # Algoritmo de assinatura
    'SIGNING_KEY': SECRET_KEY,  # Usa a mesma chave secreta do Django
    'AUTH_HEADER_TYPES': ('Bearer',),  # Prefixo do cabeçalho Authorization
    'USER_ID_FIELD': '_id',  # Campo do ID do usuário no MongoDB
    'USER_ID_CLAIM': 'user_id',  # Nome da claim no token JWT
}

CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS', '').split(',')
if not CORS_ALLOWED_ORIGINS[0]:
    CORS_ALLOWED_ORIGINS = []

CORS_ALLOW_CREDENTIALS = True  # Permite cookies e cabeçalhos de autenticação

# Configurações de sessão
SESSION_COOKIE_SECURE = True  # Apenas HTTPS
CSRF_COOKIE_SECURE = True
SECURE_SSL_REDIRECT = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

#STATIC FILES
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware'
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Removendo a configuração padrão do SQLite
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.dummy'
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
