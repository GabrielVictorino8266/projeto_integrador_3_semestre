from django.core.management.base import BaseCommand, CommandError
from django.conf import settings
from passlib.context import CryptContext
from pymongo import MongoClient
import os

class Command(BaseCommand):
    help = 'Migra senhas em texto puro para hash bcrypt no MongoDB'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Executa sem fazer altera√ß√µes, apenas mostra o que seria feito',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='For√ßa a execu√ß√£o sem confirma√ß√£o',
        )

    def handle(self, *args, **options):
        # Configurar conex√£o MongoDB
        try:
            # Usar as mesmas configura√ß√µes do settings
            MONGO_URI = os.environ.get('MONGO_URI')
            MONGO_DB_NAME = os.environ.get('MONGO_DB_NAME', 'projeto_teste')
            
            if not MONGO_URI:
                raise CommandError('MONGO_URI n√£o configurada nas vari√°veis de ambiente')
            
            # Conex√£o MongoDB
            mongo_client = MongoClient(MONGO_URI)
            mongodb = mongo_client[MONGO_DB_NAME]
            users_collection = mongodb['users']
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úì Conectado ao MongoDB: {MONGO_DB_NAME}')
            )
            
        except Exception as e:
            raise CommandError(f'Erro ao conectar ao MongoDB: {e}')

        # Configurar Passlib
        pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

        # Buscar usu√°rios com senhas
        try:
            users = list(users_collection.find({"password": {"$exists": True}}))
            
            if not users:
                self.stdout.write(
                    self.style.WARNING('Nenhum usu√°rio encontrado com campo "password"')
                )
                return
                
            self.stdout.write(f'Encontrados {len(users)} usu√°rios')
            
        except Exception as e:
            raise CommandError(f'Erro ao buscar usu√°rios: {e}')

        # Analisar quantos precisam de migra√ß√£o
        users_to_migrate = []
        users_already_hashed = []
        
        for user in users:
            plain_password = user.get('password', '')
            
            if isinstance(plain_password, str) and not plain_password.startswith('$2'):
                users_to_migrate.append(user)
            else:
                users_already_hashed.append(user)

        # Mostrar estat√≠sticas
        self.stdout.write(f'üìä Estat√≠sticas:')
        self.stdout.write(f'   ‚Ä¢ Usu√°rios com senha j√° em hash: {len(users_already_hashed)}')
        self.stdout.write(f'   ‚Ä¢ Usu√°rios que precisam migra√ß√£o: {len(users_to_migrate)}')

        if not users_to_migrate:
            self.stdout.write(
                self.style.SUCCESS('‚úì Todas as senhas j√° est√£o em formato hash!')
            )
            return

        # Mostrar usu√°rios que ser√£o migrados
        if options['dry_run']:
            self.stdout.write(
                self.style.WARNING('\nüîç MODO DRY-RUN - Nenhuma altera√ß√£o ser√° feita')
            )
        
        self.stdout.write('\nüìã Usu√°rios que ser√£o migrados:')
        for user in users_to_migrate:
            cpf = user.get('cpf', 'N/A')
            current_password = user.get('password', '')
            self.stdout.write(f'   ‚Ä¢ CPF: {cpf} (senha atual: "{current_password}")')

        # Confirma√ß√£o
        if not options['force'] and not options['dry_run']:
            confirm = input('\n‚ùì Deseja continuar com a migra√ß√£o? (y/N): ')
            if confirm.lower() not in ['y', 'yes', 's', 'sim']:
                self.stdout.write(
                    self.style.WARNING('Migra√ß√£o cancelada pelo usu√°rio')
                )
                return

        # Executar migra√ß√£o
        if not options['dry_run']:
            self.stdout.write('\nüîÑ Iniciando migra√ß√£o...')
            
            success_count = 0
            error_count = 0
            
            for user in users_to_migrate:
                try:
                    plain_password = user.get('password')
                    cpf = user.get('cpf', 'N/A')
                    
                    # Gerar hash
                    hashed_password = pwd_context.hash(plain_password)
                    
                    # Atualizar no banco
                    result = users_collection.update_one(
                        {"_id": user["_id"]},
                        {"$set": {"password": hashed_password}}
                    )
                    
                    if result.modified_count > 0:
                        self.stdout.write(f'   ‚úì CPF {cpf}: senha migrada com sucesso')
                        success_count += 1
                    else:
                        self.stdout.write(f'   ‚ö† CPF {cpf}: nenhuma altera√ß√£o feita')
                        
                except Exception as e:
                    self.stdout.write(f'   ‚ùå CPF {cpf}: erro - {e}')
                    error_count += 1

            # Resultado final
            self.stdout.write(f'\nüìà Resultado da migra√ß√£o:')
            self.stdout.write(f'   ‚Ä¢ Sucessos: {success_count}')
            self.stdout.write(f'   ‚Ä¢ Erros: {error_count}')
            
            if error_count == 0:
                self.stdout.write(
                    self.style.SUCCESS('üéâ Migra√ß√£o conclu√≠da com sucesso!')
                )
            else:
                self.stdout.write(
                    self.style.WARNING(f'‚ö† Migra√ß√£o conclu√≠da com {error_count} erros')
                )
        else:
            self.stdout.write(
                self.style.SUCCESS('\n‚úì Dry-run conclu√≠do - use --force para executar')
            )

        # Fechar conex√£o
        mongo_client.close()