# users/auth_services.py - Sem Verifica√ß√£o de Usu√°rio Ativo
from passlib.context import CryptContext
from datetime import datetime, timedelta
from bson.objectid import ObjectId
from jose import jwt, JWTError
from django.conf import settings
from mongoengine import connection
import sys

sys.path.append('/app')

def users_collection():
    return connection.get_db()['users']

def refresh_tokens_collection():
    return connection.get_db()['refresh_tokens']

def token_blacklist_collection():
    return connection.get_db()['token_blacklist']

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    """
    Verifica se uma senha em texto puro corresponde ao hash armazenado.
    Suporta tanto senhas em texto puro (compatibilidade) quanto hashes bcrypt.
    """
    if plain_password == hashed_password:
        return True
    
    try:
        if hashed_password and hashed_password.startswith('$2'):
            return pwd_context.verify(plain_password, hashed_password)
        return False
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o de senha: {e}")
        return False

def get_hash_password(password: str):
    """
    Gera um hash bcrypt para uma senha.
    """
    return pwd_context.hash(password)

def auth_user(cpf: str, password: str):
    """
    Autentica um usu√°rio verificando CPF e senha.
    REMOVIDA VERIFICA√á√ÉO DE USU√ÅRIO ATIVO.
    """
    print(f"üîç [AUTH] Tentando autenticar usu√°rio com CPF: {cpf}")
    
    user = users_collection().find_one({"cpf": cpf})

    if not user:
        print(f"‚ùå [AUTH] Usu√°rio com CPF {cpf} n√£o encontrado")
        return None
    
    stored_password = user.get("password")
    if not verify_password(password, stored_password):
        print("‚ùå [AUTH] Verifica√ß√£o de senha falhou")
        return None
    
    print(f"‚úÖ [AUTH] Usu√°rio {user.get('nome')} autenticado com sucesso")
    return user

def create_access_token(data: dict, expires_delta: timedelta = None):
    """
    Cria um token JWT de acesso.
    """
    to_encode = data.copy()

    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(hours=1)

    to_encode.update({"exp": expire})

    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.SIMPLE_JWT['ALGORITHM'])
    return encoded_jwt

def create_refresh_token(data: dict, expires_delta: timedelta = None):
    """
    Cria um token JWT de refresh.
    """
    to_encode = data.copy()

    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(days=1)
    
    to_encode.update({"exp": expire, "token_type": "refresh"})

    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.SIMPLE_JWT['ALGORITHM'])
    return encoded_jwt

def decode_token(token: str):
    """
    Decodifica um token JWT.
    """
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.SIMPLE_JWT['ALGORITHM']])
        return payload
    except JWTError as e:
        print(f"‚ùå [TOKEN] Erro JWT ao decodificar: {e}")
        return None
    except Exception as e:
        print(f"‚ùå [TOKEN] Erro inesperado ao decodificar: {e}")
        return None
    
def get_user_from_token(token: str):
    """
    Obt√©m um usu√°rio a partir de um token JWT.
    REMOVIDA VERIFICA√á√ÉO DE USU√ÅRIO ATIVO.
    """
    print(f"üîç [TOKEN] Processando token...")
    
    if is_token_blacklisted(token):
        print("‚ùå [TOKEN] Token est√° na blacklist")
        return None
    
    payload = decode_token(token)
    if not payload: 
        print("‚ùå [TOKEN] Payload vazio ou inv√°lido")
        return None
    
    user_id = payload.get("user_id")
    if not user_id:
        print("‚ùå [TOKEN] user_id n√£o encontrado no payload")
        return None
    
    try:
        user = users_collection().find_one({"_id": ObjectId(user_id)})
        if not user:
            print(f"‚ùå [TOKEN] Usu√°rio com ID {user_id} n√£o encontrado")
            return None
            
        print(f"‚úÖ [TOKEN] Usu√°rio encontrado: {user.get('name')} - {user.get('cpf')}")
        return user
    except Exception as e:
        print(f"‚ùå [TOKEN] Erro ao buscar usu√°rio: {e}")
        return None

def store_refresh_token(user_id, refresh_token):
    """
    Armazena refresh token no banco de dados.
    Invalida tokens anteriores do mesmo usu√°rio.
    """
    try:
        refresh_tokens_collection().update_many(
            {"user_id": ObjectId(user_id)},
            {"$set": {"is_active": False, "invalidated_at": datetime.utcnow()}}
        )
        
        # Armazenar novo refresh token
        refresh_tokens_collection().insert_one({
            "user_id": ObjectId(user_id),
            "token": refresh_token,
            "created_at": datetime.utcnow(),
            "expires_at": datetime.utcnow() + timedelta(days=1),
            "is_active": True
        })
        
        print(f"‚úÖ [REFRESH] Token armazenado para usu√°rio {user_id}")
        return True
        
    except Exception as e:
        print(f"‚ùå [REFRESH] Erro ao armazenar token: {e}")
        return False

def validate_refresh_token(refresh_token):
    """
    Valida se refresh token existe e est√° ativo no banco.
    REMOVIDA VERIFICA√á√ÉO DE USU√ÅRIO ATIVO.
    """
    try:
        print(f"üîç [REFRESH] Validando refresh token...")
        
        if is_token_blacklisted(refresh_token):
            print("‚ùå [REFRESH] Token est√° na blacklist")
            return None
            
        token_record = refresh_tokens_collection().find_one({
            "token": refresh_token,
            "is_active": True,
            "expires_at": {"$gt": datetime.utcnow()}
        })
        
        if not token_record:
            print("‚ùå [REFRESH] Token n√£o encontrado ou expirado")
            return None
            
        user = users_collection().find_one({"_id": token_record["user_id"]})
        
        if not user:
            print("‚ùå [REFRESH] Usu√°rio associado n√£o encontrado")
            return None
            
        print(f"‚úÖ [REFRESH] Token v√°lido para usu√°rio: {user.get('name')}")
        return user
        
    except Exception as e:
        print(f"‚ùå [REFRESH] Erro ao validar token: {e}")
        return None

def invalidate_refresh_token(refresh_token):
    """
    Invalida um refresh token espec√≠fico.
    """
    try:
        result = refresh_tokens_collection().update_one(
            {"token": refresh_token},
            {"$set": {"is_active": False, "invalidated_at": datetime.utcnow()}}
        )
        
        if result.modified_count > 0:
            print("‚úÖ [REFRESH] Token invalidado com sucesso")
            return True
        else:
            print("‚ö†Ô∏è [REFRESH] Token n√£o encontrado para invalidar")
            return False
            
    except Exception as e:
        print(f"‚ùå [REFRESH] Erro ao invalidar token: {e}")
        return False

def blacklist_token(token):
    """
    Adiciona token √† blacklist (usado no logout).
    """
    try:
        token_blacklist_collection().insert_one({
            "token": token,
            "blacklisted_at": datetime.utcnow(),
            "expires_at": datetime.utcnow() + timedelta(days=1)
        })
        
        print("‚úÖ [BLACKLIST] Token adicionado √† blacklist")
        return True
        
    except Exception as e:
        print(f"‚ùå [BLACKLIST] Erro ao adicionar token: {e}")
        return False

def is_token_blacklisted(token):
    """
    Verifica se um token est√° na blacklist.
    """
    try:
        result = token_blacklist_collection().find_one({
            "token": token,
            "expires_at": {"$gt": datetime.utcnow()}
        })
        
        return result is not None
        
    except Exception as e:
        print(f"‚ùå [BLACKLIST] Erro ao verificar blacklist: {e}")
        return False

def cleanup_expired_tokens():
    """
    Remove tokens expirados das collections.
    Deve ser executado periodicamente via comando Django.
    """
    try:
        now = datetime.utcnow()
        
        # Remover refresh tokens expirados
        refresh_result = refresh_tokens_collection().delete_many({
            "expires_at": {"$lt": now}
        })
        
        # Remover tokens da blacklist expirados
        blacklist_result = token_blacklist_collection().delete_many({
            "expires_at": {"$lt": now}
        })
        
        print(f"üßπ [CLEANUP] Limpeza conclu√≠da:")
        print(f"   ‚Ä¢ Refresh tokens removidos: {refresh_result.deleted_count}")
        print(f"   ‚Ä¢ Blacklist tokens removidos: {blacklist_result.deleted_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå [CLEANUP] Erro na limpeza: {e}")
        return False

def get_user_refresh_tokens(user_id):
    """
    Obt√©m todos os refresh tokens ativos de um usu√°rio.
    √ötil para mostrar sess√µes ativas.
    """
    try:
        tokens = list(refresh_tokens_collection().find({
            "user_id": ObjectId(user_id),
            "is_active": True,
            "expires_at": {"$gt": datetime.utcnow()}
        }))
        
        return tokens
        
    except Exception as e:
        print(f"‚ùå [REFRESH] Erro ao buscar tokens do usu√°rio: {e}")
        return []

def invalidate_all_user_tokens(user_id):
    """
    Invalida todos os tokens de um usu√°rio espec√≠fico.
    √ötil para logout de todas as sess√µes.
    """
    try:
        # Invalidar todos os refresh tokens do usu√°rio
        refresh_result = refresh_tokens_collection().update_many(
            {"user_id": ObjectId(user_id)},
            {"$set": {"is_active": False, "invalidated_at": datetime.utcnow()}}
        )
        
        print(f"‚úÖ [LOGOUT] {refresh_result.modified_count} tokens invalidados para usu√°rio {user_id}")
        return True
        
    except Exception as e:
        print(f"‚ùå [LOGOUT] Erro ao invalidar tokens do usu√°rio: {e}")
        return False